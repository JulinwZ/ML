import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pickle


def main():
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    with open('./notebooks/RGR/model.pkl','rb') as file: 
                model = pickle.load(file) #----------------------------------------------------------------–ó–ê–ú–ï–ù–ò–¢–¨----------------------------------
    st.sidebar.title('–ù–∞–≤–∏–≥–∞—Ü–∏—è')
    page = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É', ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö', '–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö', '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è'])

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    if page == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö':
        show_describe_page()
    elif page == '–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è':
        show_description_page()
    elif page == '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è':
        show_predict_page()
    elif page == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö':
        show_info_about_model_page()

def show_describe_page():
    st.header('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö')
    st.write("–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∏–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–≤–∞ üëà")
    st.write('–î–∞—Ç–∞—Å–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ ...')
    df = pd.read_csv('./notebooks/RGR/c.csv') #----------------------------------------------------------------–ó–ê–ú–ï–ù–ò–¢–¨----------------------------------

    st.dataframe(df) 

    st.header('–ê—Ç—Ä–∏–±—É—Ç—ã –¥–∞—Ç–∞ —Å–µ—Ç–∞')
    
    attribute_description = [
        "UTC: –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ (timestamp) –≤ —Ñ–æ—Ä–º–∞—Ç–µ UNIX, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –º–æ–º–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ –¥—ã–º–∞.",
        "Temperature[C]: –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è –≤ –º–æ–º–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞.",
        "Humidity[%]: –ó–Ω–∞—á–µ–Ω–∏–µ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –≤ –º–æ–º–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞.",
        "TVOC[ppb]: –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ª–µ—Ç—É—á–∏—Ö –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (Total Volatile Organic Compounds) –≤ —á–∞—Å—Ç—è—Ö –Ω–∞ –º–∏–ª–ª–∏–∞—Ä–¥ (ppb) –≤ –º–æ–º–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞. –õ–µ—Ç—É—á–∏–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –≤–∫–ª—é—á–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≥–∞–∑—ã –∏ –ø–∞—Ä—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ –∞–ª—å–¥–µ–≥–∏–¥—ã, —É–≥–ª–µ–≤–æ–¥–æ—Ä–æ–¥—ã –∏ –¥—Ä—É–≥–∏–µ –∑–∞–≥—Ä—è–∑–Ω–∏—Ç–µ–ª–∏ –≤ –≤–æ–∑–¥—É—Ö–µ.",
        "eCO2[ppm]: –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —É–≥–ª–µ–∫–∏—Å–ª–æ–≥–æ –≥–∞–∑–∞ (equivalent Carbon Dioxide) –≤ —á–∞—Å—Ç—è—Ö –Ω–∞ –º–∏–ª–ª–∏–æ–Ω (ppm) –≤ –º–æ–º–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞. –≠—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ –∏ –º–æ–∂–µ—Ç —Å–ª—É–∂–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞.",
        "Raw H2: –ó–Ω–∞—á–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ (–Ω–µ–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–≥–æ) –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤–æ–¥–æ—Ä–æ–¥–∞ (H2) –≤ –º–æ–º–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞.",
        "Raw Ethanol: –ó–Ω–∞—á–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ (–Ω–µ–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–≥–æ) –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ —ç—Ç–∞–Ω–æ–ª–∞ –≤ –º–æ–º–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞. –≠—Ç–∞–Ω–æ–ª —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞.",
        "Pressure[hPa]: –ó–Ω–∞—á–µ–Ω–∏–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è –≤ –≥–µ–∫—Ç–æ–ø–∞—Å–∫–∞–ª—è—Ö (hPa) –≤ –º–æ–º–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞.",
        "PM1.0: –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—Ü —Ä–∞–∑–º–µ—Ä–æ–º –º–µ–Ω–µ–µ 1.0 –º–∏–∫—Ä–æ–º–µ—Ç—Ä–∞ –≤ –º–æ–º–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞.",
        "PM2.5: –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏—Ü —Ä–∞–∑–º–µ—Ä–æ–º –º–µ–Ω–µ–µ 2.5 –º–∏–∫—Ä–æ–º–µ—Ç—Ä–æ–≤ –≤ –º–æ–º–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞. –ß–∞—Å—Ç–∏—Ü—ã –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –º–æ–≥—É—Ç –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –¥—ã–º–∞.",
        "NC0.5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª–µ–µ 0.5 –º–∏–∫—Ä–æ–º–µ—Ç—Ä–æ–≤ –Ω–∞ —Å–º¬≥ –≤ –º–æ–º–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞.",
        "NC1.0: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª–µ–µ 1.0 –º–∏–∫—Ä–æ–º–µ—Ç—Ä–æ–≤ –Ω–∞ —Å–º¬≥ –≤ –º–æ–º–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞.",
        "NC2.5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª–µ–µ 2.5 –º–∏–∫—Ä–æ–º–µ—Ç—Ä–æ–≤ –Ω–∞ —Å–º¬≥ –≤ –º–æ–º–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞.",
        "CNT: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–∏—Ü –≤ –º–æ–º–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞.",
        "Fire Alarm: –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–∂–∞—Ä–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–∏. 'No' –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç—Ä–µ–≤–æ–≥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, 'Yes' –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–∞."
    ]

    for i, description in enumerate(attribute_description, start = 1):
        st.markdown(f'{i}. {description}')
    st.header("–¶–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫")
    st.write("... : –¶–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–≤—Ç–µ—á–∞–µ—Ç –∑–∞ ...")
    st.write("–í —Ö–æ–¥–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã—è—Å–Ω–∏–ª–æ—Å—å, —á—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ–≥–æ 3 –ø—Ä–∏–∑–Ω–∞–∫–∞, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ —É–≤–µ—Ä–µ–Ω–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞. –≠—Ç–∏ 3 –ø—Ä–∏–∑–Ω–∞–∫–∞: ..., ..., ... .")

def show_description_page():
    st.header('–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è')
    st.write("–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∏–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–≤–∞ üëà")
    request = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", ["Heatmap", "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Å–µ–∏–≤–∞–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –æ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö", "–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ–∏–≤–∞–Ω–∏—è –¥–≤—É—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", "Boxplot - —è—â–∏–∫ —Å —É—Å–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞"])
    df = pd.read_csv('./notebooks/RGR/c.csv') #-------------------------------------------------------------------------------------------------------------------------------------------–ó–ê–ú–ï–ù–ò–¢–¨----------------------------------
    df['Fire Alarm'] = df['Fire Alarm'].replace({'Yes':1, 'No':0})
    if request == "Heatmap":
        st.markdown('<h3>Heatmap</h3>', unsafe_allow_html=True)
        plt.figure(figsize=(10,8))
        sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
        plt.title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö')
        
        st.pyplot(plt)

        plt.close()
    elif request == "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Å–µ–∏–≤–∞–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –æ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö":
        fig, axes = plt.subplots(nrows = 7, ncols = 2, figsize=(30,40)) #-------------------------------------------------------------------------------------------------------------------------------------------–ó–ê–ú–ï–ù–ò–¢–¨----------------------------------
        for idx, feature in enumerate(df.columns[:-1]):
            df.plot(feature, 'Fire Alarm', subplots=True, kind = 'scatter', ax = axes[idx // 2, idx % 2])#-------------------------------------------------------------------------------------------------------------------------------------------–ó–ê–ú–ï–ù–ò–¢–¨----------------------------------
        st.write(fig)

        # st.markdown('<h3>–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞</h3>', unsafe_allow_html=True)

        # plt.hist(df['Temperature[C]'], bins=10)
        # plt.xlabel('Temperature [C]')
        # plt.ylabel('Count')
        # plt.title('Temperature Distribution')

        # st.pyplot(plt)

        # plt.close()
    elif request == "–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ–∏–≤–∞–Ω–∏—è –¥–≤—É—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤":
        st.markdown('<h3>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Å–µ–∏–≤–∞–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏</h3>', unsafe_allow_html=True)
        x_axis = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ—Å–∏ Ox", df.columns)
        y_axis = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ—Å–∏ Oy", df.columns)
        plt.scatter(df[x_axis], df[y_axis])
        plt.xlabel(x_axis)
        plt.ylabel(y_axis)
        plt.title(f'{x_axis} vs {y_axis}')

        st.pyplot(plt)

        plt.close()
    elif request == "Boxplot - —è—â–∏–∫ —Å —É—Å–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞":
        st.markdown('<h3>Boxplot</h3>', unsafe_allow_html=True)
        selected = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫', df.columns)
        plt.boxplot(df[selected])
        plt.xlabel(selected)
        plt.ylabel('Values')
        plt.title(f'Box Plot - {selected}')

        st.pyplot(plt)

        plt.close()



def show_info_about_model_page():
    st.title('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö')
    st.write("–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∏–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–≤–∞ üëà")
    st.markdown("""–ë—ã–ª–æ –æ–±—É—á–µ–Ω–æ —Ç—Ä–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –æ—Ç–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏:
* LogisticRegressor - –¥–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ–≥–æ —ç—Ç–∏ —Ç—Ä–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞: sensor04, sensor10, sensor12. –û–Ω–∞ –ø–æ–∫–∞–∑–∞–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø—Ä–∏ —ç—Ç–æ–º, –Ω–∞ –º–æ–π –≤–∑–≥–ª—è–¥, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–Ω–æ–π.
–ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç —Ç–æ–≥–æ, –∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è–ª–∞—Å—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ –¥–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å

            classes    precision   recall   f1-score   support
           0       1.00      0.98      0.99     30986
           1       0.87      0.95      0.91     30782
           2       0.93      0.86      0.89     30859

    accuracy: 0.93
   macro avg: 0.93
weighted avg: 0.93

* GaussianNB - –º–æ–¥–µ–ª—å –æ–±—É—á–∞–ª–∞—Å—å –Ω–∞ —Ç–µ—Ö –∂–µ —Ç—Ä–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö. –ï–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:

            classes   precision    recall  f1-score   support
           0       0.87      0.97      0.92     30986
           1       0.87      0.99      0.92     30782
           2       0.95      0.71      0.82     30859

    accuracy: 0.89
   macro avg: 0.89
weighted avg: 0.89

–¶–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫:
* BaggingClassifier - –∞–Ω—Å–∞–º–±–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å –ª—É—á—à–µ –≤—Å–µ–≥–æ, –æ–¥–Ω–∞–∫–æ –Ω–µ–ª—å–∑—è —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–Ω–æ–π. –¢–∞–∫–∂–µ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –æ–Ω–∞ –æ–±–≥–æ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–≤–µ:

           classes  precision    recall  f1-score   support
           0       1.00      1.00      1.00     30986
           1       1.00      1.00      1.00     30782
           2       1.00      1.00      1.00     30859

    accuracy: 1.00
   macro avg: 1.00
weighted avg: 1.00

        """)



def show_predict_page():
    with open('./notebooks/RGR/model.pkl','rb') as file: 
        model = pickle.load(file) #----------------------------------------------------------------–ó–ê–ú–ï–ù–ò–¢–¨----------------------------------
    st.title('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')
    st.write("–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∏–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–≤–∞ üëà")
    
    sensor4 = st.number_input("–ó–∞–¥–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ ... . –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 3, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ 800:", 3, 800, 10)
    sensor4 = float(sensor4)

    sensor5 = st.number_input("–ó–∞–¥–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ ... . –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 3, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ 800:", 3, 800, 10)
    sensor5 = float(sensor4)

    sensor6 = st.number_input("–ó–∞–¥–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ ... . –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 3, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ 800:", 3, 800, 10)
    sensor6 = float(sensor4)
    
    if st.button('–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ'):
        frame = [sensor4, sensor5, sensor6]
        frame = np.array(frame).reshape((1, -1))
        data_df = pd.DataFrame(frame)
        pred1 = model.predict(data_df)
        st.write(f"–ó–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å–∏–∏–∏: {pred1[0]:.2f}, —Ç–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: 0.93")
    # uploaded_file = st.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏', type='csv')
    # if uploaded_file is not None:
    #     data = pd.read_csv(uploaded_file)
    #     st.write('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:')
    #     st.dataframe(data)

    # model_list = ['KNN', '–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å', '–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏']
    # selected_model = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∏—è', model_list)

    # predict_options = ['–ü–µ—Ä–≤—ã–µ –ø—è—Ç—å', '–í—Å–µ']

    # selected_options = st.selectbox('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π', predict_options)


    # if st.button('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å'):
    #     if selected_model == 'KNN':
    #         with open('./notebooks/RGR/knn_model.pkl','rb') as file:
    #             model = pickle.load(file)
    #             predictions = model.predict(data)
    #         elif selected_model == '–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å':
    #             with open('./notebooks/RGR/tree_model.pkl','rb') as file:
    #                 model = pickle.load(file)
    #                 predictions = model.predict(data)
    #         elif selected_model == '–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏':
    #             model_regression_restored = tf.keras.models.load_model('./models/ClassificationModel1')
    #             predict = model_regression_restored.predict(data)
    #             predictions = []
    #             for q in predict:
    #                 if q[0] > q[1]:
    #                     predictions.append(0)
    #                 else:
    #                     predictions.append(1)
    #         st.write('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:')
    #         if num_predictions == 5:
    #             predictions_table = pd.DataFrame({'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è': predictions[:5]})
    #         else:
    #             predictions_table = pd.DataFrame({'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è': predictions})
            
    #         st.dataframe(predictions_table)
            
# –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å
        


if __name__ == '__main__':
    main()

# !pip install streamlit
#!pip install scikit-learn

#!npm install localtunnel

#!streamlit run /content/app.py &>/content/logs.txt &

#!curl https://ipinfo.io/ip

#!npx localtunnel --port 8501